Proc scc(G:Graph,color:N_P<Int>,id:N_P<Int>,scc:N_P<Int>,size:Int):Int{
    Int i = 0;
    Int nnum = size;
    Int ret = 0;
    G.scc = 0;
    Int change = 1;
    While(nnum > 0){
        [printf("round %d\n", i)];
        i++;
        Foreach(n:G.Nodes)(n.scc == 0){
            n.color = n.id;
        }
        While(change > 0){
            change = 0;
            Foreach(n:G.Nodes)(n.scc == 0){
                Foreach(e:n.OutNbrs)(e.scc == 0){
                    If(n.color > e.color){
                        e.color = n.color;
                        change++;
                    }
                }
            }
        }
        [printf("step 1 over \n")];

        Foreach(n:G.Nodes)(n.scc == 0){
            Node root;
            If(Exist(z: G.Nodes){z.scc == 0 && z.color == n.id}){
                Foreach(t:G.Nodes)(t.scc == 0 && t.color == n.id){
                    root = t;
                }
                root.scc = 1;
                InBFS(b:G^.Nodes From root)[b.color == n.id]
                {
                    b.scc = 1;
                }
                ret++;
            }
        }
        [printf("step 2 over \n")];

    }
    Return ret;
}