Proc color_scc(G:Graph,color:N_P<Int>,id:N_P<Int>,scc:N_P<Int>,size:Int):Int{
    Int i = 0;
    Int nnum = size;
    Int ret = 0;
    Int change = 1;
    N_P<Int> inedge;
    N_P<Int> outedge;
    G.inedge = 0;
    G.outedge = 0;
    Foreach(n:G.Nodes){
        Foreach(e: n.InNbrs){
            n.inedge += 1;
        }
        Foreach(e: n.InNbrs){
            n.outedge += 1;
        }
    }
    Foreach(n:G.Nodes){
        If(n.inedge == 0 || n.outedge == 0){
            n.scc = 1;
            nnum--;
            ret++;
        }
    }
    While(nnum > 0){
        [printf("round %d\n", i)];
        i++;
        Foreach(n:G.Nodes)(n.scc == 0){
            n.color = n.id;
        }
        While(change > 0){
            change = 0;
            Foreach(n:G.Nodes)(n.scc == 0){
                Foreach(e:n.OutNbrs)(e.scc == 0){
                    If(n.color > e.color){
                        e.color = n.color;
                        change++;
                    }
                }
            }
        }
        [printf("step 1 over \n")];

        Foreach(n:G.Nodes)(n.scc == 0){
            Node rt = n;
            Foreach(t:G.Nodes)(t.scc == 0 && t.color == n.id){
                rt = t;
            }
            rt.scc = 1;
            InBFS(b:G^.Nodes From rt)[b.color == n.id]
            {
                b.scc = 1;
                nnum--;
            }
            ret++;
        }
        [printf("step 2 over \n")];

    }
    Return ret;
}